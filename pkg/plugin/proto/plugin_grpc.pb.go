// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/plugin/proto/plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlertFlowPlugin_Execute_FullMethodName      = "/alertflow.AlertFlowPlugin/Execute"
	AlertFlowPlugin_StreamStatus_FullMethodName = "/alertflow.AlertFlowPlugin/StreamStatus"
)

// AlertFlowPluginClient is the client API for AlertFlowPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Plugin service definition
type AlertFlowPluginClient interface {
	Execute(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginResponse, error)
	StreamStatus(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusUpdate], error)
}

type alertFlowPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertFlowPluginClient(cc grpc.ClientConnInterface) AlertFlowPluginClient {
	return &alertFlowPluginClient{cc}
}

func (c *alertFlowPluginClient) Execute(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginResponse)
	err := c.cc.Invoke(ctx, AlertFlowPlugin_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertFlowPluginClient) StreamStatus(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AlertFlowPlugin_ServiceDesc.Streams[0], AlertFlowPlugin_StreamStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PluginRequest, StatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlertFlowPlugin_StreamStatusClient = grpc.ServerStreamingClient[StatusUpdate]

// AlertFlowPluginServer is the server API for AlertFlowPlugin service.
// All implementations must embed UnimplementedAlertFlowPluginServer
// for forward compatibility.
//
// Plugin service definition
type AlertFlowPluginServer interface {
	Execute(context.Context, *PluginRequest) (*PluginResponse, error)
	StreamStatus(*PluginRequest, grpc.ServerStreamingServer[StatusUpdate]) error
	mustEmbedUnimplementedAlertFlowPluginServer()
}

// UnimplementedAlertFlowPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlertFlowPluginServer struct{}

func (UnimplementedAlertFlowPluginServer) Execute(context.Context, *PluginRequest) (*PluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedAlertFlowPluginServer) StreamStatus(*PluginRequest, grpc.ServerStreamingServer[StatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedAlertFlowPluginServer) mustEmbedUnimplementedAlertFlowPluginServer() {}
func (UnimplementedAlertFlowPluginServer) testEmbeddedByValue()                         {}

// UnsafeAlertFlowPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertFlowPluginServer will
// result in compilation errors.
type UnsafeAlertFlowPluginServer interface {
	mustEmbedUnimplementedAlertFlowPluginServer()
}

func RegisterAlertFlowPluginServer(s grpc.ServiceRegistrar, srv AlertFlowPluginServer) {
	// If the following call pancis, it indicates UnimplementedAlertFlowPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlertFlowPlugin_ServiceDesc, srv)
}

func _AlertFlowPlugin_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertFlowPluginServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertFlowPlugin_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertFlowPluginServer).Execute(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertFlowPlugin_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PluginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertFlowPluginServer).StreamStatus(m, &grpc.GenericServerStream[PluginRequest, StatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlertFlowPlugin_StreamStatusServer = grpc.ServerStreamingServer[StatusUpdate]

// AlertFlowPlugin_ServiceDesc is the grpc.ServiceDesc for AlertFlowPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertFlowPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alertflow.AlertFlowPlugin",
	HandlerType: (*AlertFlowPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _AlertFlowPlugin_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStatus",
			Handler:       _AlertFlowPlugin_StreamStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/plugin/proto/plugin.proto",
}
